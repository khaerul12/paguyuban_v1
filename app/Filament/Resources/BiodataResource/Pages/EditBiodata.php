<?php

namespace App\Filament\Resources\BiodataResource\Pages;

use App\Filament\Resources\BiodataResource;
use App\Models\Address;
use App\Models\Biodata;
use App\Models\City;
use App\Models\Province;
use Filament\Actions;
use Filament\Actions\Action;
use Filament\Resources\Pages\EditRecord;
use Illuminate\Support\Facades\Log;

class EditBiodata extends EditRecord
{
    protected static string $resource = BiodataResource::class;

    protected ?string $heading = "Edit Kepala Keluarga";

    public $oldAddress;

    protected function getHeaderActions(): array
    {
        return [
            Actions\DeleteAction::make()->hidden(),
        ];
    }

    protected function getRedirectUrl(): string
    {
        return $this->getResource()::getUrl('index');
    }

    protected function getSaveFormAction(): Action
    {
        return parent::getSaveFormAction()
            ->color('success')
            ->label('simpan')
            ->icon('heroicon-o-check'); // TODO: Change the autogenerated stub
    }

    public function getId()
    {
        $id = $this->getRecord()->id;
        $this->oldAddress = Address::where('biodata_id', $id)->get();
        return parent::getId(); // TODO: Change the autogenerated stub
    }


    protected function mutateFormDataBeforeSave(array $data): array
    {
        $address = $this->getRecord()->hasOne(Address::class)->get();

        if ($address[0]['city_id'] <> $this->oldAddress[0]['city_id']) {
            $old = City::find($this->oldAddress[0]['city_id']);
            $old->count =  $old->count - 1;
            $old->update();

            $new = City::find($address[0]['city_id']);
            $new->count = $new->count + 1;
            $new->update();

            info(
                'New Data City {new} and Old Data City {old}.',
                [
                    'new' => $address[0]['city_id'],
                    'old' => $this->oldAddress[0]['city_id']
                ]
            );
            //            dd($address[0]['city_id'] , $this->oldAddress[0]['city_id']);
        }

        if ($address[0]['province_id'] <> $this->oldAddress[0]['province_id']) {
            $old = Province::find($this->oldAddress[0]['province_id']);
            $old->count = $old->count - 1;
            $old->update();

            $new = City::find($address[0]['province_id']);
            $new->count = $new->count + 1;
            $new->update();

            info(
                'New Data Province {new} and Old Data Province {old}.',
                [
                    'new' => $address[0]['province_id'],
                    'old' => $this->oldAddress[0]['province_id']
                ]
            );
        }
        return parent::mutateFormDataBeforeSave($data);
    }



    protected function getCancelFormAction(): Action
    {
        return parent::getCancelFormAction()
            ->label('Kembali'); // TODO: Change the autogenerated stub
    }
}
